# Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, ConfusionMatrixDisplay
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier

wine_df = pd.read_csv('/content/drive/MyDrive/winequality-red.csv', sep=';')

print(wine_df.shape)
print(wine_df.info())
print(wine_df.isnull().sum())
print(wine_df.describe())
print(wine_df['quality'].value_counts())

wine_df.hist(bins=100, figsize=(10,12))
plt.show()

plt.figure(figsize=(10,7))
sns.heatmap(wine_df.corr(), annot=True)
plt.title('Correlation between the columns')
plt.show()

print(wine_df.corr()['quality'].sort_values())
sns.barplot(x='quality', y='alcohol', data=wine_df)
plt.show()

wine_df['quality'] = wine_df.quality.apply(lambda x: 1 if x >= 7 else 0)
print(wine_df['quality'].value_counts())

X = wine_df.drop('quality', axis=1)
y = wine_df['quality']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print("X_train", X_train.shape)
print("y_train", y_train.shape)
print("X_test", X_test.shape)
print("y_test", y_test.shape)

logreg = LogisticRegression()
logreg.fit(X_train, y_train)

dtree = DecisionTreeClassifier()
dtree.fit(X_train, y_train)

rforest = RandomForestClassifier()
rforest.fit(X_train, y_train)

svm_model = SVC(probability=True)
svm_model.fit(X_train, y_train)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb.fit(X_train, y_train)

def evaluate_model_v2(model, X_test, y_test, name):
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    if hasattr(model, "predict_proba"):
        y_proba = model.predict_proba(X_test)[:, 1]
        roc_auc = roc_auc_score(y_test, y_proba)
    elif hasattr(model, "decision_function"):
        y_scores = model.decision_function(X_test)
        roc_auc = roc_auc_score(y_test, y_scores)
    else:
        roc_auc = None

    print(f"\n{name} Performance:")
    print(f"Accuracy      : {acc:.4f}")
    print(f"Precision     : {prec:.4f}")
    print(f"Recall        : {rec:.4f}")
    print(f"F1 Score      : {f1:.4f}")
    print(f"ROC AUC Score : {roc_auc:.4f}" if roc_auc is not None else "ROC AUC Score : Not available")

    cm = confusion_matrix(y_test, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=np.unique(y_test))
    disp.plot()
    plt.title(f"Confusion Matrix - {name}")
    plt.show()

    return {
        'Model': name,
        'Accuracy': acc,
        'Precision': prec,
        'Recall': rec,
        'F1 Score': f1,
        'ROC AUC': roc_auc if roc_auc is not None else 0
    }

results = []
results.append(evaluate_model_v2(logreg, X_test, y_test, "Logistic Regression"))
results.append(evaluate_model_v2(dtree, X_test, y_test, "Decision Tree"))
results.append(evaluate_model_v2(rforest, X_test, y_test, "Random Forest"))
results.append(evaluate_model_v2(svm_model, X_test, y_test, "SVM"))
results.append(evaluate_model_v2(knn, X_test, y_test, "KNN"))
results.append(evaluate_model_v2(xgb, X_test, y_test, "XGBoost"))

metrics_df = pd.DataFrame(results)
print("\n=== Model Comparison Table ===")
print(metrics_df)

metrics_melted = metrics_df.melt(id_vars='Model', var_name='Metric', value_name='Score')

plt.figure(figsize=(12, 6))
sns.barplot(data=metrics_melted, x='Model', y='Score', hue='Metric')
plt.title('Comparison of Model Metrics')
plt.ylabel('Score')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

metrics_to_check = ['Accuracy', 'Precision', 'Recall', 'F1 Score', 'ROC AUC']

print("\n Best Models Based on Each Metric:")
for metric in metrics_to_check:
    best = metrics_df.loc[metrics_df[metric].idxmax()]
    print(f"\n Best model by {metric}: {best['Model']}")
    print(f"{metric}: {best[metric]:.4f}")

metrics_df['Average Score'] = metrics_df[metrics_to_check].mean(axis=1)
overall_best = metrics_df.loc[metrics_df['Average Score'].idxmax()]

print("\n Overall Best Model Based on Average of All Metrics:")
print(f"\n Model: {overall_best['Model']}")
print(f" Average Score: {overall_best['Average Score']:.4f}")
